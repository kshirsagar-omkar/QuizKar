DROP TABLE IF EXISTS question CASCADE;
DROP TABLE IF EXISTS quiz CASCADE;
DROP TABLE IF EXISTS study_plan CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS leaderboard CASCADE;
DROP TABLE IF EXISTS user_studyplan_enrollment CASCADE;




-- ===============================
-- 1. USERS TABLE
-- ===============================
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    -- password VARCHAR(255) NOT NULL,
    password TEXT NOT NULL,
    role VARCHAR(10) NOT NULL DEFAULT 'user' 
        CHECK (role IN ('user', 'admin'))
);






-- ===============================
-- 2. STUDY PLAN TABLE
-- ===============================
CREATE TABLE study_plan (
    studyplan_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    link TEXT NOT NULL DEFAULT '#',
    status VARCHAR(15) NOT NULL DEFAULT 'not_complete'
        CHECK(status IN ('not_complete', 'complete')), --Added Status column
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by INT NOT NULL,
    FOREIGN KEY (created_by) REFERENCES users(user_id) 
        ON UPDATE CASCADE ON DELETE CASCADE
);  






-- ===============================
-- 2.a USER STUDY PLAN ENROLLMENT TABLE
-- ===============================
CREATE TABLE user_studyplan_enrollment (
    enrollment_id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    studyplan_id INT NOT NULL,
    enrolled_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) 
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (studyplan_id) REFERENCES study_plan(studyplan_id) 
        ON UPDATE CASCADE ON DELETE CASCADE,
    UNIQUE(user_id, studyplan_id)
);






-- ===============================
-- 3. QUIZ TABLE (Renamed time_taken -> time_limit)
-- ===============================
CREATE TABLE quiz (
    quiz_id SERIAL PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    time_limit INT NOT NULL, -- Renamed column
    created_by INT NOT NULL,
    FOREIGN KEY (created_by) REFERENCES users(user_id) 
        ON UPDATE CASCADE ON DELETE CASCADE
);






-- ===============================
-- 4. QUESTION TABLE
-- ===============================
CREATE TABLE question (
    question_id SERIAL PRIMARY KEY,
    quiz_id INT NOT NULL,
    question_text TEXT NOT NULL,
    option_a VARCHAR(255) NOT NULL,
    option_b VARCHAR(255) NOT NULL,
    option_c VARCHAR(255) NOT NULL,
    option_d VARCHAR(255) NOT NULL,
    correct_answer CHAR(1) NOT NULL 
        CHECK (correct_answer IN ('A', 'B', 'C', 'D')),
    FOREIGN KEY (quiz_id) REFERENCES quiz(quiz_id) 
        ON UPDATE CASCADE ON DELETE CASCADE
);






-- ===============================
-- 5. LEADERBOARD TABLE (Added time_taken column)
-- ===============================
CREATE TABLE leaderboard (
    leaderboard_id SERIAL PRIMARY KEY,
    participation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    quiz_id INT NOT NULL,
    user_id INT NOT NULL,
    UNIQUE (quiz_id, user_id),
    score INT NOT NULL CHECK (score >= 0),
    time_taken INT NOT NULL, -- New column: actual time taken by user in minutes
    FOREIGN KEY (quiz_id) REFERENCES quiz(quiz_id) 
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) 
        ON UPDATE CASCADE ON DELETE CASCADE
);






-- ============================
-- 1. INSERT USERS

--ex :                                                                   // This part is used here because we want an user_id generated by postgresql
 --   String query = "INSERT INTO users (username, email) VALUES (?, ?) RETURNING user_id";

 
-- ============================
INSERT INTO users (username, email, password, role) VALUES 
('admin', 'admin@gmail.com', '1', 'admin');

INSERT INTO users (username, email, password) VALUES 
('aaa', 'aaa@gmail.com', '123'),
('bbb', 'bbb@gmail.com', '123'),
('ccc', 'ccc@gmail.com', '123');



-- ================================
--1.1 Update Record
--UPDATE users SET username = 'zzz', email = 'zzz@gmail.com', password = '321' WHERE user_id = 2;

-- JDBC : "UPDATE users SET username = ?, email = ?, password = ? WHERE user_id = ?";





--1.2 Validate Record
-- SELECT user_id FROM users WHERE (username = 'aaa' OR email='bbb@gmail.com') AND password = '123';

-- JDBC : SELECT user_id FROM users WHERE ( username = ? OR email = ? ) AND password = ?;


                                                                -- ===================================
                                                                -- ===================================
                                                                 -- "IFFFFF" we use hashing for password therfore the Validate Query Becomes
                                                                                                                  -- =======

                                                                -- SELECT user_id, password FROM users WHERE username = ? OR email = ?

                                                                    -- if(rs.next())
                                                                    -- {
                                                                    --     String storedHash = rs.getPassword();
                                                                    --     Boolean status = BCrypt.checkpw(user.getPassword(), storedHash);
                                                                    -- }
                                                                    

                                                                -- ===================================
                                                                -- ===================================




-- --SQL Injection ATTACK  
--                     if user enters username like this ==> ' OR 1=1; --
-- quizkar=# SELECT user_id FROM users WHERE username = '' OR 1=1; --' AND password = '123';
-- quizkar-# ;
--  user_id 
-- ---------
--        1
--        3
--        4
--        2
-- (4 rows)




-- How It Prevents Injection:
-- PreparedStatement does not treat user input as part of the SQL logic, it treats input as data.
-- // Even if attacker enters ' OR 1=1; -- , it's treated as a simple string.








-- ===================================
















-- ============================
-- 2. INSERT STUDY PLANS
-- ============================
INSERT INTO study_plan (name, created_by) VALUES 
('C Programming Basics', 1),
('C++ Advanced Concepts', 1),
('Java Fundamentals', 1),
('Python for Beginners', 1),
('Data Structures in C', 1);






-- ============================
-- 3. USER ENROLLMENTS
-- ============================
INSERT INTO user_studyplan_enrollment (user_id, studyplan_id) VALUES 
(2, 1), (2, 2), (2, 3),
(3, 1), (3, 4);

--===============================

-- UPDATE status which user has completed the study plan

-- UPDATE study_plan sp
-- SET status = 'complete'
-- FROM user_studyplan_enrollment use
-- WHERE sp.studyplan_id = use.studyplan_id
-- AND use.user_id = 2                                      --User Who Has completed
-- AND sp.studyplan_id = 2;                                 --Study Plan which user completed


-- JDBC : UPDATE study_plan sp SET status = ? FROM user_studyplan_enrollment use WHERE sp.studyplan_id = use.studyplan_id AND use.user_id = ? AND sp.studyplan_id = ?

UPDATE study_plan sp SET status = 'complete' FROM user_studyplan_enrollment use WHERE sp.studyplan_id = use.studyplan_id AND use.user_id = 2 AND sp.studyplan_id = 2;

--===============================





-- ============================
-- 4. INSERT QUIZZES (Updated column name to time_limit)
-- ============================
INSERT INTO quiz (title, created_by, time_limit) VALUES 
('C Language Concepts Quiz', 1, 15),  -- 15 minutes
('Java OOPs Quiz', 1, 20);            -- 20 minutes

-- Note When this is inserted in table make sure primary key is returned from this because it will use for the creating question for specific topic

--UPDATE

-- UPDATE quiz SET title = ?, time_limit = ? where quiz_id = ?


-- ============================
-- 5. INSERT QUESTIONS
-- ============================
INSERT INTO question (quiz_id, question_text, option_a, option_b, option_c, option_d, correct_answer) VALUES
(1, 'What is the correct syntax to declare a pointer?', 'int *ptr;', 'int ptr*;', 'ptr int*;', 'int pointer;', 'A'),
(1, 'Which of the following is used to exit from a loop immediately?', 'continue', 'break', 'exit', 'return', 'B'),
(1, 'Which header file is required for printf() function?', '<stdio.h>', '<stdlib.h>', '<conio.h>', '<string.h>', 'A'),
(1, 'Find the error: int main() { int x = 5; if(x = 10) { printf("Yes"); } }', 'No error', 'Assignment instead of comparison', 'Missing semicolon', 'Incorrect printf syntax', 'B'),
(1, 'Size of int in 64-bit architecture is:', '2 bytes', '4 bytes', '8 bytes', 'Depends on compiler', 'C'),

(2, 'Which keyword is used to inherit a class in Java?', 'extends', 'implements', 'inherits', 'super', 'A'),
(2, 'What is the default value of a boolean variable in Java?', 'true', 'false', '0', 'null', 'B'),
(2, 'Which concept allows multiple forms of a method in Java?', 'Inheritance', 'Polymorphism', 'Encapsulation', 'Abstraction', 'B'),
(2, 'Find the error: class Test { void main(String args[]) { System.out.println("Hello"); } }', 'No error', 'main method must be static', 'Incorrect print syntax', 'Missing class keyword', 'B'),
(2, 'Which of the following is not an access modifier in Java?', 'public', 'private', 'protected', 'default', 'D');






-- ============================
-- 6. INSERT LEADERBOARD RECORDS (Added time_taken values)
-- ============================
INSERT INTO leaderboard (quiz_id, user_id, score, time_taken) VALUES
(1, 2, 80, 12),  -- User completed quiz in 12 minutes
(2, 2, 85, 18),
(1, 3, 95, 14);







-- ================================================
-- SELECT QUERIES
-- ================================================


--==================================================================

-- 1. Get ALL Study Plans
SELECT studyplan_id, name, link, created_at 
FROM study_plan;


-- 1.1. Get StudyPlans Created by admin
-- SELECT studyplan_id, name, created_at FROM study_plan WHERE created_by = 1;

-- 3.2 Delete StudyPlans Created by admin
-- DELETE FROM study_plan WHERE studyplan_id = ?;

--==================================================================



--==================================================================

-- 2. Get Study Plans Enrolled by Specific User (User2)
SELECT sp.studyplan_id, sp.name, sp.link, sp.status, sp.created_at 
FROM study_plan sp
JOIN user_studyplan_enrollment use ON sp.studyplan_id = use.studyplan_id
WHERE use.user_id = 2;

--==================================================================



--==================================================================

-- 3. Get ALL Quizzes (Updated to show time_limit)
SELECT quiz_id, title, time_limit, created_at 
FROM quiz;


-- 3.1. Get Quezes Created by admin
-- SELECT quiz_id, title, time_limit, created_at FROM quiz WHERE created_by = 1;

-- 3.2 Delete Quezes Created by admin
-- DELETE FROM quiz WHERE quiz_id = ?;

--==================================================================


-- 4. Get Quizzes Given by Specific User (User3) with time_taken
SELECT q.quiz_id, q.title, q.time_limit, lb.score, lb.participation_date, lb.time_taken
FROM quiz q
JOIN leaderboard lb ON q.quiz_id = lb.quiz_id
WHERE lb.user_id = 3;






-- 5. Global Leaderboard (Ordered by score, date, time_taken)

-- SELECT u.username, q.title, lb.score, lb.participation_date, q.time_limit, lb.time_taken
-- FROM leaderboard lb
-- JOIN users u ON lb.user_id = u.user_id
-- JOIN quiz q ON lb.quiz_id = q.quiz_id
-- ORDER BY lb.score DESC, lb.participation_date ASC, lb.time_taken ASC;


SELECT
    q.title,
    u.username,
    lb.score,
    lb.participation_date,
    q.time_limit,
    lb.time_taken,
    ROW_NUMBER() OVER (PARTITION BY q.quiz_id ORDER BY lb.score DESC, lb.time_taken ASC) AS rank
FROM leaderboard lb
JOIN users u ON lb.user_id = u.user_id
JOIN quiz q ON lb.quiz_id = q.quiz_id
ORDER BY q.title, rank;










-- 6. Get Questions by quiz_id

SELECT question_id, question_text, option_a, option_b, option_c, option_d FROM question WHERE quiz_id = 2;




--Not Getting Answers with this query because when user inspect the page then he can also see the answers thats why

--+++++++++++++++++++++++++++++++++++++++++++++++++++++

--Therefore im using another query to get only answers

SELECT correct_answer FROM question WHERE quiz_id = 2;








-- Database Connection



-- private static final String DB_URL = "jdbc:postgresql://dpg-cv497i5umphs73eqreh0-a.singapore-postgres.render.com:5432/ajdb19?sslmode=require";
-- private static final String DB_USER = "root";
-- private static final String DB_PASS = "zEh8cb5Ge5ZC8QiYYcXpyOXNuymrztoS";



-- private static final String DB_URL = "jdbc:postgresql://ep-small-glade-a1aqhfjk-pooler.ap-southeast-1.aws.neon.tech:5432/quizkar?sslmode=require";
-- private static final String DB_USER = "root";
-- private static final String DB_PASS = "npg_YKH3dG4SInNx";



-- public class DBUtil {
    
-- //     Hardcoded Render database credentials
-- //    private static final String DB_URL = "jdbc:postgresql://localhost:5432/quizkar?sslmode=disable";
-- //    private static final String DB_USER = "root";
-- //    private static final String DB_PASS = "root@123";


    
--     private static final String DB_URL = "jdbc:postgresql://ep-small-glade-a1aqhfjk-pooler.ap-southeast-1.aws.neon.tech:5432/quizkar?sslmode=require";
--     private static final String DB_USER = "root";
--     private static final String DB_PASS = "npg_YKH3dG4SInNx";
    
--     private static final String DB_DRIVER = "org.postgresql.Driver";
    
--     static {
--         try {
--             Class.forName(DB_DRIVER);
--         } catch (ClassNotFoundException e) {
--             throw new RuntimeException("PostgreSQL driver missing!", e);
--         }
--     }

--     public static Connection getConnection() throws SQLException {
--         return DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
--     }
    
    
    
--     public static void main(String[] args)
--     {
--         try {
--             Connection c = DBUtil.getConnection();
--             System.out.println("Success");
--         }
--         catch(Exception e) {
--             e.printStackTrace();
--         }
--     }
    
-- }


