package com.quizkar.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.quizkar.entities.Users;
import com.quizkar.util.DBUtil;

public class UsersDAOImpl implements UsersDAO{

	//Returns UserId of added users
	public Integer addUser(Users user) throws SQLException
	{
																		// (RETURNING user_id) This part is used here because we want an user_id generated by postgresql
		String query = "INSERT INTO users (username, email, password, role) VALUES (?, ?, ?, ?) RETURNING user_id";
		Integer generatedId = null;
		
		try (Connection connection = DBUtil.getConnection();
		     PreparedStatement preparedStatement = connection.prepareStatement(query)) {
			
//			connection.setAutoCommit(false);
			
		    preparedStatement.setString(1, user.getUserName());
		    preparedStatement.setString(2, user.getEmail());
		    preparedStatement.setString(3, user.getPassword());
		    preparedStatement.setString(4, user.getRole());

		    ResultSet resultSet = preparedStatement.executeQuery();

		    
		    if (resultSet.next()) {
		        generatedId = resultSet.getInt("user_id");
//		        System.out.println("Inserted User ID: " + generatedId);
		    }
		}
		catch (SQLException e) {
		    e.printStackTrace();
		    throw e; 
		}
		return generatedId;
		
	}

	
	
	
	public Integer updateUser(Users user) throws SQLException
	{
		
//		Connection connection = null;
		String query = "UPDATE users SET username = ?, email = ?, password = ? WHERE user_id = ?";
		Integer affectedRows = 0;
		
		try(Connection connection  = DBUtil.getConnection()) {
			
			connection.setAutoCommit(false);
			
			try( PreparedStatement preparedStatement = connection.prepareStatement(query)){
				
				preparedStatement.setString(1, user.getUserName());
				preparedStatement.setString(2, user.getEmail());
				preparedStatement.setString(3, user.getPassword());
				preparedStatement.setInt(4, user.getUserId());
				
				affectedRows = preparedStatement.executeUpdate();
				connection.commit();
			}
			catch(SQLException e) {
				e.printStackTrace();
				if(connection != null) {
					try {
						connection.rollback();
					}
					catch(SQLException rollBackEX) {
						rollBackEX.printStackTrace();
					}
				}
				throw e;
			}
		}
		return affectedRows;
	}
	
	
	
	
	
	public Users validateUser(Users user) throws SQLException
	{
		Users retUser = null;
		
		String query = "SELECT * FROM users WHERE ( username = ? OR email = ? ) AND password = ? AND role = ?";
		
		try(Connection connection = DBUtil.getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement(query))
		{
			preparedStatement.setString(1, user.getUserName());
			preparedStatement.setString(2, user.getEmail());
			preparedStatement.setString(3, user.getPassword());
			preparedStatement.setString(4, user.getRole());
			
			try(ResultSet resultSet = preparedStatement.executeQuery()){
				if(resultSet.next()) {
					retUser = new Users();
					retUser.setUserId( resultSet.getInt("user_id") );
					retUser.setUserName( resultSet.getString("username") );
					retUser.setEmail( resultSet.getString("email") );
//					retUser.setPassword( resultSet.getString("password") ); 
					retUser.setRole( resultSet.getString("role") );
				}
			}
		}
		
		return retUser;
	}
	
	
	
	
	
	
	
	
	public Users getUser(Users user) throws SQLException
	{
		Users retUser = null;
		
		String query = "SELECT * FROM users WHERE username = ? OR email = ?";
		
		try(Connection connection = DBUtil.getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement(query))
		{
			preparedStatement.setString(1, user.getUserName());
			preparedStatement.setString(2, user.getEmail());
			
			try(ResultSet resultSet = preparedStatement.executeQuery()){
				if(resultSet.next()) {
					
					retUser = new Users();
					
					retUser.setUserId( resultSet.getInt("user_id") );
					retUser.setUserName( resultSet.getString("username") );
					retUser.setEmail( resultSet.getString("email") );
					retUser.setPassword( resultSet.getString("password") ); 
					retUser.setRole( resultSet.getString("role") );
				}
			}
		}		
		return retUser;
	}
	
	
	
	
	
	public Integer deleteUser(Integer userId) throws SQLException
	{
		Integer affectedRow = 0;
		final String query = "DELETE FROM users WHERE user_id = ?";
		
		try (Connection connection = DBUtil.getConnection()){
			
			connection.setAutoCommit(false);
			
			try( PreparedStatement preparedStatement  = connection.prepareStatement(query)) {
					
				preparedStatement.setInt(1, userId);
				
				affectedRow = preparedStatement.executeUpdate();
				
				connection.commit();
			}
			catch(SQLException e) {
				if(connection != null) {
					connection.rollback();
				}
				throw e;
			}
			
		}
		return affectedRow;
	}
	
	

	
	//Return the total number of users registred in application
	public Integer getTotalUsers() throws SQLException{
		
		String query = "SELECT user_count FROM registration_count";
		
		try(Connection connection = DBUtil.getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement(query))
		{
			
			try(ResultSet resultSet = preparedStatement.executeQuery()){
				if(resultSet.next()) {
					return resultSet.getInt("user_count");
				}
			}
		}		
		return 0;
	}
	
	
	//Update userRegistration count for every registration returns row affected
	public Integer updateTotalUser() throws SQLException{
		
		String query = "UPDATE registration_count SET user_count = (SELECT user_count FROM registration_count) + 1";
		Integer affectedRows = 0;
		
		try(Connection connection  = DBUtil.getConnection()) {
			
			connection.setAutoCommit(false);
			
			try( PreparedStatement preparedStatement = connection.prepareStatement(query)){
				
				affectedRows = preparedStatement.executeUpdate();
				connection.commit();
			}
			catch(SQLException e) {
				e.printStackTrace();
				if(connection != null) {
					try {
						connection.rollback();
					}
					catch(SQLException rollBackEX) {
						rollBackEX.printStackTrace();
					}
				}
				throw e;
			}
		}
		return affectedRows;
	}
	
	
	
	
	
	
	
	
	
	
	
//	
//	public static void main(String[] args) {
//	    try {
//	    	UsersDAO ud = new UsersDAOImpl();
//	
//	    	
//	    	
//	    	Integer userId = ud.deleteUser(4);
//	
//	    	System.out.println(userId);
//	    	
//	    	
//	    }
//	    catch(SQLException e) {
//	    	e.printStackTrace();
//	    }
//	}
	
	
	
//	private static void displayUser(Users user)
//	{
//	    if (user != null) {
//	        System.out.println("User Details:");
//	        System.out.println("User ID   : " + user.getUserId());
//	        System.out.println("Username  : " + user.getUserName());
//	        System.out.println("Email     : " + user.getEmail());
//	        System.out.println("Role      : " + user.getRole());
//	        // Not printing password for security reasons
//	    } else {
//	        System.out.println("No user data to display.");
//	    }
//	}


}
